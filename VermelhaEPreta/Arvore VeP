public class RedBlackTree {
    
     //Construtor
     
    public RedBlackTree( ) {
        header      = new RedBlackNode( null );
        header.left = header.right = nullNode;
    }
    
    /*
      Compare item e t.element, usando compareTo, com
      ressalva que, se t for o cabeçalho, o item será sempre maior.
      Esta rotina é chamada se for possível que t seja cabeçalho.
      Se não for possível que t seja cabeçalho, use compareTo diretamente.
     */
     
    private final int compare( Comparable item, RedBlackNode t ) {
        if( t == header )
            return 1;
        else
            return item.compareTo( t.element );
    }
    
    /*
      Insira na árvore..
      @param item o item a ser inserido.
      @throws DuplicateItemException , uma exceção se o item já estiver presente.
     */
    public void insert( Comparable item ) {
        current = parent = grand = header;
        nullNode.element = item;
        
        while( compare( item, current ) != 0 ) {
            great = grand; grand = parent; parent = current;
            current = compare( item, current ) < 0 ?
                current.left : current.right;
            
            // Verifica se tem 2 filhos vermelhos e conserta caso aja
            if( current.left.color == RED && current.right.color == RED )
                handleReorient( item );
        }
        
        // Inserção não ocorre se nó já estiver presente
        if( current != nullNode )
            throw new DuplicateItemException( item.toString( ) );
        current = new RedBlackNode( item, nullNode, nullNode );
        
        // Liga nó ao pai
        if( compare( item, parent ) < 0 )
            parent.left = current;
        else
            parent.right = current;
        handleReorient( item );
    }
    
    /*
      Remover da árvore
      @param x o item a ser removido.
      @throws UnsupportedOperationException se Chamado.
     */
    public void remove( Comparable x ) {
        throw new UnsupportedOperationException( );
    }
    
    /**
     Encontra o menor elemento da árvore
      @return , retorna o menor elemento da árvore ou null se estiver vazia
     */
    public Comparable findMin( ) {
        if( isEmpty( ) )
            return null;
        
        RedBlackNode itr = header.right;
        
        while( itr.left != nullNode )
            itr = itr.left;
        
        return itr.element;
    }
    
    /*
      Encontra o maior elemento da árvore
      @return o maior elemento da árvore ou null se vazia.
     */
    public Comparable findMax( ) {
        if( isEmpty( ) )
            return null;
        
        RedBlackNode itr = header.right;
        
        while( itr.right != nullNode )
            itr = itr.right;
        
        return itr.element;
    }
    
    /*
      Acha um elemento an árvore
      @param x o elemento ser buscado.
      @return o item correspondente ou null se não for achado.
     */
    public Comparable find( Comparable x ) {
        nullNode.element = x;
        current = header.right;
        
        for( ; ; ) {
            if( x.compareTo( current.element ) < 0 )
                current = current.left;
            else if( x.compareTo( current.element ) > 0 )
                current = current.right;
            else if( current != nullNode )
                return current.element;
            else
                return null;
        }
    }
    
    //Fazer a árvore logicamente vazia
     
     
    public void makeEmpty( ) {
        header.right = nullNode;
    }
    
    // Exibe todos os items
    
     
    public void printTree( ) {
        printTree( header.right );
    }
    
    /*
      Imprime subárvore em ordem de classificação
      @param t é o nó raiz
     */
    private void printTree( RedBlackNode t ) {
        if( t != nullNode ) {
            printTree( t.left );
            System.out.println( t.element );
            printTree( t.right );
        }
    }
    
    /*
      Testa sse árvore está logicamente vazia
      @return true se está vazia, false se não.
     */
    public boolean isEmpty( ) {
        return header.right == nullNode;
    }
    
    /*
     Rotina interna que é chamada durante uma inserção
     se um nó tiver dois filhos vermelhos. Executa flip e rotações.
     @param item, o item que está sendo inserido.
     */
    private void handleReorient( Comparable item ) {
        // inversão de cores
        current.color = RED;
        current.left.color = BLACK;
        current.right.color = BLACK;
        
        if( parent.color == RED )   // Precisar rotacionar
        {
            grand.color = RED;
            if( ( compare( item, grand ) < 0 ) !=
                    ( compare( item, parent ) < 0 ) )
                parent = rotate( item, grand );  // Inicia rotação
            current = rotate( item, great );
            current.color = BLACK;
        }
        header.right.color = BLACK; // Faz raiz Preta
    }
    
    /*
     Rotina interna que executa uma rotação
     Como o resultado é anexado ao pai, há quatro casos.
     Chamado por handleReorient.
     @param item ,o item em handleReorient.
     @param parent ,o pai da raiz da subárvore rotacionada.
     @return a raiz da subárvore rotacionada.
     */
    private RedBlackNode rotate( Comparable item, RedBlackNode parent ) {
        if( compare( item, parent ) < 0 )
            return parent.left = compare( item, parent.left ) < 0 ?
                rotateWithLeftChild( parent.left )  :  // EE
                rotateWithRightChild( parent.left ) ;  // ED
        else
            return parent.right = compare( item, parent.right ) < 0 ?
                rotateWithLeftChild( parent.right ) :  // DE
                rotateWithRightChild( parent.right );  // DD
    }
    
    //Gira o nó da árvore binária com o filho esquerdo.
     
    private static RedBlackNode rotateWithLeftChild( RedBlackNode k2 ) {
        RedBlackNode k1 = k2.left;
        k2.left = k1.right;
        k1.right = k2;
        return k1;
    }
    
    //Gira o nó da árvore binária com o filho direito
     
    private static RedBlackNode rotateWithRightChild( RedBlackNode k1 ) {
        RedBlackNode k2 = k1.right;
        k1.right = k2.left;
        k2.left = k1;
        return k2;
    }
    
    private static class RedBlackNode {
        // Construtores
        RedBlackNode( Comparable theElement ) {
            this( theElement, null, null );
        }
        
        RedBlackNode( Comparable theElement, RedBlackNode lt, RedBlackNode rt ) {
            element  = theElement;
            left     = lt;
            right    = rt;
            color    = RedBlackTree.BLACK;
        }
        
        Comparable   element;    // Info no nó
        RedBlackNode left;       // Filho esquerdo
        RedBlackNode right;      // Filho Direito
        int          color;      // COr
    }
    
    private RedBlackNode header;
    private static RedBlackNode nullNode;
    static         // Static inicializador por nó nulo
    {
        nullNode = new RedBlackNode( null );
        nullNode.left = nullNode.right = nullNode;
    }
    
    private static final int BLACK = 1;    // Preto é 1
    private static final int RED   = 0;
    
    // Usado na rotina de inserção e seus auxiliares
    private static RedBlackNode current;
    private static RedBlackNode parent;
    private static RedBlackNode grand;
    private static RedBlackNode great;
    
    
    // Programa teste
    public static void main( String [ ] args ) {
        RedBlackTree t = new RedBlackTree( );
        final int NUMS = 400000;
        final int GAP  =  35461;
        
        System.out.println( "Checking... (não mais saídas significa sucesso)" );
        
        for( int i = GAP; i != 0; i = ( i + GAP ) % NUMS )
            t.insert( new Integer( i ) );
        
        if( ((Integer)(t.findMin( ))).intValue( ) != 1 ||
                ((Integer)(t.findMax( ))).intValue( ) != NUMS - 1 )
            System.out.println( "Erro FindMin ou FindMax!" );
        
        for( int i = 1; i < NUMS; i++ )
            if( ((Integer)(t.find( new Integer( i ) ))).intValue( ) != i )
                System.out.println( "Encontrado erro1!" );
    }
}



  //Classe de exceção para erros de itens duplicados nas inserções da árvore de pesquisa.
 
public class DuplicateItemException extends RuntimeException
{
    //Construa este objeto de exceção.
    
    public DuplicateItemException( )
    {
        super( );
    }
    /*
      Construa este objeto de exceção.
      @param message, a mensagem de erro
     */
    public DuplicateItemException( String message )
    {
        super( message );
    }
}
